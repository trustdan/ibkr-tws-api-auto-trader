package client

import (
	"context"
	"time"

	"github.com/user/trader-scanner/pkg/models"
	"github.com/user/trader-scanner/pkg/pb"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
)

// GRPCMarketDataClient implements MarketDataClient using gRPC calls to a Python service
type GRPCMarketDataClient struct {
	client     pb.MarketDataServiceClient
	connection *grpc.ClientConn
}

// NewGRPCClient creates a new gRPC client connected to the specified address
func NewGRPCClient(serverAddr string) (*GRPCMarketDataClient, error) {
	// Set up a connection to the gRPC server
	conn, err := grpc.Dial(serverAddr, grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		return nil, err
	}

	// Create a new MarketDataService client
	// In a real implementation, this would be generated by protoc
	// For our mock, we'll need to manually create a client (we'll implement this later)
	var client pb.MarketDataServiceClient

	return &GRPCMarketDataClient{
		client:     client,
		connection: conn,
	}, nil
}

// Close closes the gRPC connection
func (g *GRPCMarketDataClient) Close() error {
	if g.connection != nil {
		return g.connection.Close()
	}
	return nil
}

// GetHistoricalBars retrieves historical bars from the Python service
func (g *GRPCMarketDataClient) GetHistoricalBars(ctx context.Context, symbol string, days int) ([]models.Bar, error) {
	// Create a gRPC request
	req := &pb.BarsRequest{
		Symbol: symbol,
		Days:   int32(days),
	}

	// Call the gRPC service
	resp, err := g.client.GetHistoricalBars(ctx, req)
	if err != nil {
		return nil, err
	}

	// Convert the protobuf bars to our model bars
	bars := make([]models.Bar, 0, len(resp.Bars))
	for _, protoBar := range resp.Bars {
		// Parse the date
		date, err := time.Parse("2006-01-02", protoBar.Date)
		if err != nil {
			// Use current date as fallback if parsing fails
			date = time.Now()
		}

		// Create a model bar
		bar := models.Bar{
			Date:   date,
			Open:   protoBar.Open,
			High:   protoBar.High,
			Low:    protoBar.Low,
			Close:  protoBar.Close,
			Volume: protoBar.Volume,
		}

		bars = append(bars, bar)
	}

	return bars, nil
}

// GetIVPercentile retrieves the IV percentile from the Python service
func (g *GRPCMarketDataClient) GetIVPercentile(ctx context.Context, symbol string) (float64, error) {
	// Create a gRPC request
	req := &pb.IVRequest{
		Symbol: symbol,
	}

	// Call the gRPC service
	resp, err := g.client.GetIVPercentile(ctx, req)
	if err != nil {
		return 0, err
	}

	return resp.Percentile, nil
}
